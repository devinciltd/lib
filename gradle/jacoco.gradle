apply plugin: 'jacoco'

project.afterEvaluate {

  //noinspection GroovyAssignabilityCheck
  task jacocoTestReport() {
    group = "Reporting"
  }

  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->
      def sourceName = "${buildTypeName}"
      if (productFlavorName) {
        sourceName = "${productFlavorName}${sourceName.capitalize()}"
      }
      def targetName = "${sourceName.capitalize()}"
      def testTaskName = "test${targetName}UnitTest"
      def coverageTaskName = "jacocoTestReport${targetName}UnitTest"

      //noinspection GroovyAssignabilityCheck
      task "$coverageTaskName"(type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for ${targetName} variant."

        classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/${sourceName}",
            excludes: ['**/*_MembersInjector.class',
                       '**/Dagger*Component.class',
                       '**/Dagger*Component$Builder.class',
                       '**/*Module_*Factory.class',
                       '**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])

        def coverageSourceDirs = ["src/main/java",
                                  "src/$productFlavorName/java",
                                  "src/$buildTypeName/java"]

        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${buildDir}/jacoco/${testTaskName}.exec")

        reports {
          xml.enabled = true
          html.enabled = true
        }
      }
      jacocoTestReport.dependsOn(coverageTaskName)
    }
  }
}
